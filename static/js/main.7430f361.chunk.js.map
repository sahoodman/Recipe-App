{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,wMCiB3CC,EAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKN,GACL,4BACKG,EAAYI,KAAI,SAAAJ,GAAW,OACxB,4BAAKA,EAAYK,UAGzB,2BAAIP,GACJ,yBAAKQ,IAAKP,EAAOQ,IAAI,OCyDlBC,G,MAlEH,WACV,IADgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,YARnB,mBAQTK,EARS,KAQFC,EARE,KAchBC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAlBf,WAkBe,oBAjBd,qCAgBG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MAJC,2CAAH,qDAiBhB,OACE,yBAAKxB,UAAU,OAEb,0BAAMyB,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,IAMoBX,UAAU,eACnC,2BACEA,UAAU,aACV4B,KAAK,OACLC,MAAOlB,EACPmB,SAlBa,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,OACnBP,QAAQC,IAAIZ,MAkBR,4BAAQX,UAAU,gBAAgB4B,KAAK,UAAvC,WAMF,yBAAK5B,UAAU,WACdS,EAAQN,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACE8B,IAAK9B,EAAOA,OAAOL,SACnBD,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,qBClDjBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.7430f361.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__pHrmY\",\"image\":\"recipe_image__1Nu1l\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredients => (\r\n                    <li>{ingredients.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img src={image} alt=\"\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => { \n  const APP_ID = \"b717a2fd\";\n  const APP_KEY = \"45c9b47a69389351e64f2fe634d9c9c3\";\n\n\n  //const [counter, setCounter] = useState(0);\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('icecream');\n\n  // useEffect(() => {\n  //   console.log(\"Effect has been run\");\n  // }, [counter]);\n\n  useEffect( () => {\n    getRecipes();\n  }, [query]);\n  \n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    console.log(data.hits);\n    setRecipes(data.hits);\n  }\n  \n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n  \n  return(\n    <div className=\"App\">\n      {/* <h1>Hwllo react</h1> */}\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input \n          className=\"search-bar\" \n          type=\"text\" \n          value={search}\n          onChange={updateSearch}\n          />\n        <button className=\"search-button\" type=\"Submit\">\n          Search \n          {/* {counter} */}\n          </button>\n      </form >\n      {/* <h1 onClick = {() => setCounter(counter+1)}>{counter}</h1> */}\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe \n          key={recipe.recipe.calories}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}